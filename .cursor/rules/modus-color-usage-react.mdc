---
description: Color usage guidelines for React + Vite with Modus Design System
alwaysApply: false
---

# Modus Color Usage in React + Vite

## üé® **Design System Color Architecture**

**CRITICAL**: This React + Vite application uses a **9-color design system** that maps Figma variables to Modus's color system, available as Tailwind classes.

**Color System**: 9 Modus colors mapped to design system variables in `src/index.css`

## ‚ùå **FORBIDDEN: Raw Modus CSS Variables**

### ‚ùå **Never Use Raw Modus Variables**

```tsx
// ‚ùå WRONG: Raw Modus CSS variables
style={{ backgroundColor: "var(--modus-wc-color-base-page)" }}
style={{ color: "var(--modus-wc-color-base-content)" }}
style={{ borderColor: "var(--modus-wc-color-base-200)" }}

// ‚ùå WRONG: Direct Modus variable usage
className="bg-[var(--modus-wc-color-base-page)]"
className="text-[var(--modus-wc-color-base-content)]"
```

### ‚ùå **Never Use Hardcoded Colors**

```tsx
// ‚ùå WRONG: Hardcoded hex/RGB values
style={{ backgroundColor: "#ffffff" }}
style={{ color: "#000000" }}
style={{ borderColor: "#e5e5e5" }}

// ‚ùå WRONG: Hardcoded colors in Tailwind
className="bg-[#ffffff]"
className="text-[#000000]"
```

### ‚ùå **Never Use Generic Tailwind Colors**

```tsx
// ‚ùå WRONG: Generic Tailwind color classes
className = "bg-blue-500";
className = "text-red-400";
className = "border-green-300";
className = "bg-gray-100";
```

## ‚úÖ **CORRECT: Design System Colors**

### ‚úÖ **Use Design System Tailwind Classes**

```tsx
// ‚úÖ CORRECT: Design system colors
className = "bg-background text-foreground";
className = "bg-card text-card-foreground";
className = "bg-primary text-primary-foreground";
className = "bg-secondary text-secondary-foreground";
className = "bg-muted text-muted-foreground";
className = "bg-accent text-accent-foreground";
className = "bg-destructive text-destructive-foreground";
className = "bg-warning text-warning-foreground";
className = "bg-success text-success-foreground";
```

### ‚úÖ **Available Design System Colors**

```tsx
// ‚úÖ CORRECT: All available design system colors
const colorClasses = {
  // Background colors
  background: "bg-background",
  card: "bg-card",
  popover: "bg-popover",
  sidebar: "bg-sidebar",

  // Text colors
  foreground: "text-foreground",
  "card-foreground": "text-card-foreground",
  "popover-foreground": "text-popover-foreground",
  "sidebar-foreground": "text-sidebar-foreground",

  // Primary colors
  primary: "bg-primary",
  "primary-foreground": "text-primary-foreground",

  // Secondary colors
  secondary: "bg-secondary",
  "secondary-foreground": "text-secondary-foreground",

  // Muted colors
  muted: "bg-muted",
  "muted-foreground": "text-muted-foreground",

  // Accent colors
  accent: "bg-accent",
  "accent-foreground": "text-accent-foreground",

  // Status colors
  destructive: "bg-destructive",
  "destructive-foreground": "text-destructive-foreground",
  warning: "bg-warning",
  "warning-foreground": "text-warning-foreground",
  success: "bg-success",
  "success-foreground": "text-success-foreground",

  // Border colors
  border: "border-border",
  input: "border-input",
  "sidebar-border": "border-sidebar-border",

  // Ring colors
  ring: "ring-ring",
  "sidebar-ring": "ring-sidebar-ring",
};
```

## üéØ **Color Usage Patterns**

### ‚úÖ **Component Color Patterns**

```tsx
// ‚úÖ CORRECT: Card component
function Card({ children }: { children: ReactNode }) {
  return (
    <div className="bg-card text-card-foreground border border-border rounded-lg p-4">
      {children}
    </div>
  );
}

// ‚úÖ CORRECT: Button component
function Button({ variant = "primary", children }: ButtonProps) {
  const baseClasses = "px-4 py-2 rounded font-medium transition-colors";

  const variantClasses = {
    primary: "bg-primary text-primary-foreground hover:bg-primary/90",
    secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/90",
    destructive:
      "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    outline:
      "border border-border bg-background text-foreground hover:bg-muted",
  };

  return (
    <button className={`${baseClasses} ${variantClasses[variant]}`}>
      {children}
    </button>
  );
}

// ‚úÖ CORRECT: Input component
function Input({ className, ...props }: InputProps) {
  return (
    <input
      className={`bg-input text-foreground border border-input rounded px-3 py-2 ${className}`}
      {...props}
    />
  );
}
```

### ‚úÖ **Status Color Patterns**

```tsx
// ‚úÖ CORRECT: Status indicators
function StatusIndicator({
  status,
}: {
  status: "success" | "warning" | "error";
}) {
  const statusClasses = {
    success: "bg-success text-success-foreground",
    warning: "bg-warning text-warning-foreground",
    error: "bg-destructive text-destructive-foreground",
  };

  return (
    <div className={`px-3 py-1 rounded ${statusClasses[status]}`}>{status}</div>
  );
}

// ‚úÖ CORRECT: Alert component
function Alert({ type, children }: AlertProps) {
  const typeClasses = {
    success: "bg-success text-success-foreground border-success",
    warning: "bg-warning text-warning-foreground border-warning",
    error: "bg-destructive text-destructive-foreground border-destructive",
    info: "bg-primary text-primary-foreground border-primary",
  };

  return (
    <div className={`p-4 rounded border ${typeClasses[type]}`}>{children}</div>
  );
}
```

### ‚úÖ **Theme-Aware Color Patterns**

```tsx
// ‚úÖ CORRECT: Theme-aware component
function ThemedComponent() {
  const { isDark } = useTheme();

  return (
    <div
      className={`
      bg-background text-foreground
      ${isDark ? "border-border" : "border-border"}
      transition-colors duration-200
    `}
    >
      <h2 className="text-foreground">Title</h2>
      <p className="text-muted-foreground">Description</p>
    </div>
  );
}
```

## üé® **Advanced Color Patterns**

### ‚úÖ **Gradient Patterns**

```tsx
// ‚úÖ CORRECT: Design system gradients
function GradientCard() {
  return (
    <div className="bg-gradient-to-r from-primary to-accent text-primary-foreground p-6 rounded-lg">
      <h3>Gradient Card</h3>
      <p>Using design system colors for gradients</p>
    </div>
  );
}

// ‚úÖ CORRECT: Subtle gradients
function SubtleGradient() {
  return (
    <div className="bg-gradient-to-br from-background to-muted p-4 rounded">
      <p className="text-foreground">Subtle gradient background</p>
    </div>
  );
}
```

### ‚úÖ **Hover and Focus States**

```tsx
// ‚úÖ CORRECT: Interactive color states
function InteractiveButton() {
  return (
    <button
      className="
      bg-primary text-primary-foreground
      hover:bg-primary/90
      focus:ring-2 focus:ring-ring focus:ring-offset-2
      active:bg-primary/80
      transition-colors duration-200
    "
    >
      Interactive Button
    </button>
  );
}

// ‚úÖ CORRECT: Card hover effects
function HoverCard() {
  return (
    <div
      className="
      bg-card text-card-foreground
      hover:bg-card/80
      hover:shadow-lg
      transition-all duration-200
      border border-border
      rounded-lg p-4
    "
    >
      Hover Card
    </div>
  );
}
```

## üö´ **Common Anti-Patterns**

### ‚ùå **Don't Mix Color Systems**

```tsx
// ‚ùå WRONG: Mixing design system and generic colors
<div className="bg-background text-blue-500 border-red-300">
  Mixed color systems
</div>

// ‚ùå WRONG: Using both design system and hardcoded colors
<div className="bg-card" style={{ color: "#ff0000" }}>
  Mixed approaches
</div>
```

### ‚ùå **Don't Use Color for Non-Color Properties**

```tsx
// ‚ùå WRONG: Using colors for spacing, sizing, etc.
<div className="bg-primary p-4">
  {" "}
  {/* ‚ùå bg-primary for spacing */}
  <span className="text-foreground text-lg">
    {" "}
    {/* ‚ùå text-lg for sizing */}
    Content
  </span>
</div>
```

### ‚ùå **Don't Override Design System Colors**

```tsx
// ‚ùå WRONG: Overriding design system colors
<div className="bg-background" style={{ backgroundColor: "#custom-color" }}>
  Overriding design system
</div>
```

## üîß **Color Validation**

### ‚úÖ **Linting Commands**

```bash
# Check for color violations
npm run lint:colors

# Check for inline styles
npm run lint:styles

# Check for border violations
npm run lint:borders
```

### ‚úÖ **Color Testing Patterns**

```tsx
// ‚úÖ CORRECT: Test color combinations
function ColorTest() {
  const colorCombinations = [
    { bg: "bg-background", text: "text-foreground" },
    { bg: "bg-card", text: "text-card-foreground" },
    { bg: "bg-primary", text: "text-primary-foreground" },
    { bg: "bg-secondary", text: "text-secondary-foreground" },
    { bg: "bg-muted", text: "text-muted-foreground" },
    { bg: "bg-accent", text: "text-accent-foreground" },
    { bg: "bg-destructive", text: "text-destructive-foreground" },
    { bg: "bg-warning", text: "text-warning-foreground" },
    { bg: "bg-success", text: "text-success-foreground" },
  ];

  return (
    <div className="space-y-4">
      {colorCombinations.map((combo, index) => (
        <div key={index} className={`${combo.bg} ${combo.text} p-4 rounded`}>
          {combo.bg} + {combo.text}
        </div>
      ))}
    </div>
  );
}
```

## üéØ **Key Takeaways**

1. **Use Design System Colors**: Always use `bg-background`, `text-foreground`, etc.
2. **Never Use Raw Variables**: Don't use `var(--modus-wc-color-*)` directly
3. **Never Use Hardcoded Colors**: No hex, RGB, or generic Tailwind colors
4. **Test Color Combinations**: Ensure proper contrast and accessibility
5. **Follow Color Patterns**: Use established patterns for consistency

## üîç **Color System Reference**

### Available Design System Colors:

```tsx
// Background colors
bg - background, bg - card, bg - popover, bg - sidebar;

// Text colors
text - foreground,
  text - card - foreground,
  text - popover - foreground,
  text - sidebar - foreground;

// Primary colors
bg - primary, text - primary - foreground;

// Secondary colors
bg - secondary, text - secondary - foreground;

// Muted colors
bg - muted, text - muted - foreground;

// Accent colors
bg - accent, text - accent - foreground;

// Status colors
bg - destructive, text - destructive - foreground;
bg - warning, text - warning - foreground;
bg - success, text - success - foreground;

// Border colors
border - border, border - input, border - sidebar - border;

// Ring colors
ring - ring, ring - sidebar - ring;
```

---

**Remember: This React + Vite application uses a 9-color design system mapped to Modus colors. Always use design system Tailwind classes, never raw Modus variables or hardcoded colors. This ensures consistent theming and proper color management across the application.**
